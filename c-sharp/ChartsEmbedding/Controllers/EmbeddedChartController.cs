using System;
using System.Collections.Generic;
using System.Linq;
using System.Security.Cryptography;
using System.Text;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;

namespace ChartsEmbedding.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class EmbeddedChartController : ControllerBase
    {
        // Replace these constants with the correct values for your Charts instance
        private const string CHARTS_EMBEDDING_BASE_URL = "~REPLACE~CHARTS_EMBEDDING_BASE_URL"; // Replace with the base URL to your Charts instance, e.g. https://charts.mongodb.com/charts-foo-abcde (no trailing slash)
        private const string EMBEDDING_SIGNING_KEY = "~REPLACE~EMBEDDING_SIGNING_KEY"; // Replace with the Embedding Signing Key generated by your Charts admin
        private TimeSpan expiryTime = TimeSpan.FromMinutes(5); // Set to your preferred expiry period 
        private const string FILTER_DOCUMENT = null; // Set to a MongoDB Query if you want to filter the chart, e.g. "{ foo: { $gt: 10 }}"
        private TimeSpan? autoRefreshTime = null; // Set to a number of seconds >=10 if you want the chart to autorefresh, eg. TimeSpan.FromSeconds(30);


        // GET api/embeddedchart/<chartId>
        [HttpGet("{id}")]
        public ActionResult<string> Get(string id)
        {
            // Remember, in a real application, you should ensure your user is authenticated and authorized to view the chart before you return the signed URL.

            int timestamp = (int)(DateTime.UtcNow - new DateTime(1970, 1, 1)).TotalSeconds;
            string payload = $"id={id}&timestamp={timestamp}&expires-in={expiryTime.TotalSeconds}";
            if (FILTER_DOCUMENT != null) {
                payload += $"&filter={Uri.EscapeDataString(FILTER_DOCUMENT)}";
            }
            if (autoRefreshTime.HasValue) {
                payload += $"&autorefresh={autoRefreshTime.Value.TotalSeconds}";
            }
            var signature = GetHashAsHex(EMBEDDING_SIGNING_KEY, payload);
            return $"{CHARTS_EMBEDDING_BASE_URL}/embed/charts?{payload}&signature={signature}"; 
        }

        private static string GetHashAsHex(string key, string input)
        {
            var hmac = new HMACSHA256(Encoding.ASCII.GetBytes(key));
            var hashBytes = hmac.ComputeHash(Encoding.ASCII.GetBytes(input));
            return BitConverter.ToString(hashBytes).Replace("-", "").ToLower();
        }
    }
}